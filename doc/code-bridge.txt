*code-bridge.txt*    Neovim plugin for Claude Code CLI integration

Author: Samir Roy
License: GPL v2

==============================================================================
CONTENTS                                                  *code-bridge-contents*

1. Introduction ................................. |code-bridge-introduction|
2. Requirements ................................. |code-bridge-requirements|  
3. Installation ................................. |code-bridge-installation|
4. Commands ..................................... |code-bridge-commands|
5. Configuration ................................ |code-bridge-configuration|
6. Examples ..................................... |code-bridge-examples|

==============================================================================
INTRODUCTION                                          *code-bridge-introduction*

code-bridge.nvim provides seamless integration between Neovim and Claude Code
CLI. It allows you to send file context and queries directly to Claude from
within your editor, with support for tmux integration and persistent chat
buffers.

==============================================================================
REQUIREMENTS                                          *code-bridge-requirements*

- Neovim 0.7+ (uses modern Lua APIs)
- Claude Code CLI installed and configured
- tmux (optional, for automatic window switching)

==============================================================================
INSTALLATION                                          *code-bridge-installation*

Using lazy.nvim: >
    {
      "samiroy/code-bridge.nvim",
      config = function()
        require('code-bridge').setup()
      end
    }
<

Using packer.nvim: >
    use {
      "samiroy/code-bridge.nvim",
      config = function()
        require('code-bridge').setup()
      end
    }
<

Manual installation: >
    git clone https://github.com/samiroy/code-bridge.nvim \
      ~/.config/nvim/pack/plugins/start/code-bridge.nvim
<
==============================================================================
COMMANDS                                                  *code-bridge-commands*

                                                          *:CodeBridgeTmux*
:CodeBridgeTmux             Send current file context to tmux "claude" window.
                            Works in both normal and visual mode.
                            
                            Context format:
                            - Normal mode: @filename.ext
                            - Visual mode: @filename.ext#L1-5
                            
                            Behavior:
                            1. Copies context to clipboard
                            2. Checks for tmux session
                            3. Looks for window named "claude"
                            4. Sends context and switches to claude window
                            5. Falls back to clipboard if tmux unavailable

                                                          *:CodeBridgeQuery*
:CodeBridgeQuery            Open interactive chat with Claude Code, including
                            file context. Creates a persistent markdown buffer
                            for the conversation. Conversation continues if
                            the buffer remains open and is cleared when the
                            buffer is closed.
                            
                            Features:
                            - Prompts for user input
                            - Combines file context with query
                            - Sends the prompt to Claude Code
                            - Displays results in reusable chat buffer

                                                          *:CodeBridgeChat*
:CodeBridgeChat             Similar to |:CodeBridgeQuery| but without file 
                            context. Useful for general questions unrelated
                            to the current file.

==============================================================================
CONFIGURATION                                        *code-bridge-configuration*

The plugin works out of the box with no configuration required. 

Optional key bindings: >
    vim.keymap.set("n", "<leader>ct", ":CodeBridgeTmux<CR>", 
                   { desc = "Send context to claude via tmux" })
    vim.keymap.set("v", "<leader>ct", ":CodeBridgeTmux<CR>", 
                   { desc = "Send selection to claude via tmux" })
    vim.keymap.set("n", "<leader>cq", ":CodeBridgeQuery<CR>", 
                   { desc = "Query claude with context" })
    vim.keymap.set("v", "<leader>cq", ":CodeBridgeQuery<CR>", 
                   { desc = "Query claude with selection" })
    vim.keymap.set("n", "<leader>cc", ":CodeBridgeChat<CR>", 
                   { desc = "Chat with claude" })
<

==============================================================================
EXAMPLES                                                  *code-bridge-examples*

Tmux Setup:
Set up a tmux session with a claude window: >
    tmux new-session -d -s coding
    tmux new-window -t coding -n claude
    tmux send-keys -t coding:claude 'claude' Enter

Workflow Example:
1. Open file in Neovim
2. Select lines in visual mode: `V5j`
3. Run `:CodeBridgeQuery`
4. Type: "Explain this function"
5. View response in chat buffer
6. Continue with follow-up queries

Context Examples:
- Normal mode in `src/main.py`: `@src/main.py`
- Visual selection lines 10-15: `@src/main.py#L10-15`

==============================================================================
vim:tw=78:et:ft=help:norl:
